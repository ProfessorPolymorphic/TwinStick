---
title: "TwinStick Data Summary"

format: html

code-fold: true
---

The purpose of this document is to consistently summarize the data from Project TwinStick, allowing us to more consistently test the evolutionary model and gameplay during development.

## Data

In this section, we ingest the data from whatever runs are relevant to the analysis. The data are written from the project in `.csv` files. The following code reads all `.csv` files from the working directory. It creates new variables for the source file name (`file`) and the number of offspring produced by each individual (`offspring_count`). It then appends all the data files into a single data frame called `allfiles`.

```{r}
#| output: false

library(tidyverse)
library(pheatmap)


files <- list.files(pattern = "*.csv", full.names = TRUE)

allfiles = data.frame()
for(csv in files){
  Twin3 <- read.csv(csv, as.is=T, header=T)
  Twin3['file'] = csv


Twin3<-Twin3%>%
  mutate(Unique.Slime.ID = paste(Wave.Number, ".", Slime.ID))%>%
  mutate(Unique.Parent.One = paste(Wave.Number-1, ".", Parent.One))%>%
  mutate(Unique.Parent.Two = paste(Wave.Number-1, ".", Parent.Two))


df_parents <- Twin3 %>%
  select(Unique.Parent.One, Unique.Parent.Two) %>%
  pivot_longer(cols = everything(), names_to = "parent_type", values_to = "parent_id")

# Count the number of offspring for each parent
offspring_counts <- df_parents %>%
  group_by(parent_id) %>%
  summarise(offspring_count = n(), .groups = "drop")

offspring_counts <- offspring_counts%>%
  filter(parent_id != "-1 . N/A")


offspring_counts<- rename(offspring_counts, Unique.Slime.ID = parent_id)



Twin3 <- Twin3 %>%
  left_join(offspring_counts, by = "Unique.Slime.ID")%>%
  replace_na(list(offspring_count = 0))

allfiles<-rbind(allfiles,Twin3)

}

allfiles<-allfiles%>%
  select(-X)%>%
  mutate(Lightning.Resist.Trait = case_when(
    Main.Type == "Lightning" & Secondary.Type == "Lightning" ~ 0.5 + Secondary.Resistance.Trait,
    Main.Type == "Lightning" & Secondary.Type != "Lightning" ~ 0.5 ,
    Main.Type != "Lightning" & Secondary.Type == "Lightning" ~ Secondary.Resistance.Trait,
    Main.Type != "Lightning" & Secondary.Type != "Lightning" ~ 0,
    TRUE ~ 0
  ))


Traits <- c("Lightning.Resist.Trait", "Main.Resistance.Trait", "Secondary.Resistance.Trait", "Speed.Trait",
           "Tower.Attraction.Trait", "Slime.Optimal.Distance.Trait", "Turn.Rate.Trait", 
           "Slime.View.Range.Trait", "Tower.View.Range.Trait")

Genes <- c("Main.Resistance.Gene", "Secondary.Resistance.Gene", "Speed.Gene",
           "Tower.Attraction.Gene", "Slime.Optimal.Distance.Gene", "Turn.Rate.Gene", 
           "Slime.View.Range.Gene", "Tower.View.Range.Gene")

allfiles<-allfiles%>%
  mutate(Generation=as.factor(Wave.Number))%>%
  mutate(offspring.count.Fitness = offspring_count) %>%
   mutate(Actual.Distance.Fitness = (Player.Distance.Fitness/50000) -1)

TraitAvg <- allfiles %>%
  group_by(file, Generation) %>%
  summarize(across(ends_with("Trait"), mean,  na.rm = TRUE))

GeneAvg <- allfiles %>%
  group_by(file, Generation) %>%
  summarize(across(ends_with("Gene"), list(mean = mean, var = var), na.rm = TRUE, .names = "{.fn}.{.col}"))

FitAvg <- allfiles %>%
  group_by(file, Generation) %>%
  summarize(across(ends_with("Fitness"), list(mean = mean, var = var), na.rm = TRUE, .names = "{.fn}.{.col}"))



  




```

The `allfiles` dataframe contains the following variables (I also show a few columns of the example data):

```{r}
data.dictionary <- t(as.data.frame(head(allfiles)))
knitr::kable(data.dictionary)

```

Variables that end in `.Gene` are the values of the genome for that particular locus. Variables that end in `.Trait` are the values of the trait for that particular locus.

## Experimental Conditions

**Use this section to describe the goal of the data collection and the key conditions that define the test.**

This test occurred July 21, 2023 and was focused on the new fitness functions implemented by Justin. We are interested in determining whether the fitness functions work correctly.

The conditions were a standard "L" shaped set of walls with four lightning towers. The slimes acquire fitness by getting close to the player using a formula of 50,000 / (path distance +1). For replicates 4-6, Justin corrected the math concerning the `~.Resistance.~` genes.

## Slime Types

Each Slime has a `Main.Type` and a `Secondary.Type`. These types use the `~.Resistance.~` category to confer resistance to the appropriate damage type. Under certain experimental conditions, we would expect the `~.Type` and `~.Resistance.~` genes and traits to evolve in response to the predominant damage type delivered by the player.

The following code creates two summary dataframes with the suffix `~Typecounts` that count the number of slimes of each `~.Type` in each generation for each replicate. It then creates the graphs of `~Type` frequency over time.

```{r}

MainTypecounts <- allfiles %>%
  group_by(Main.Type, Generation, file) %>%
  summarise(Main.count = n(), .groups = "drop")

SecondaryTypecounts <- allfiles %>%
  group_by(Secondary.Type, Generation, file) %>%
  summarise(Secondary.count = n(), .groups = "drop")

            

ggplot(MainTypecounts, aes(x = Generation, y = Main.count, fill = as.factor(Main.Type))) +
  geom_col(position = "stack") +
  labs(x = "Generation", y = "Count", fill = "Main Slime Type") +
  theme_minimal()+
  facet_wrap(~file, ncol=2)

ggplot(SecondaryTypecounts, aes(x = Generation, y = Secondary.count, fill = as.factor(Secondary.Type))) +
  geom_col(position = "stack") +
  labs(x = "Generation", y = "Count", fill = "Secondary Slime Type") +
  theme_minimal()+
  facet_wrap(~file, ncol=2)

```

## Slime Fitness

This section should summarize the behavior of the fitness function. The fitness function calculates a value of 50,000/(distance to player +1). I will also reverse calculate that for visualization.

```{r}


         
ggplot(allfiles, aes(x=Wave.Number, y= Player.Distance.Fitness))+
  geom_point(aes(x=Wave.Number, y= Player.Distance.Fitness, color = offspring_count),alpha =0.1)+
  geom_smooth()+
  facet_wrap(~file, ncol = 2)+
  scale_color_continuous(low="blue", high = "red")


ggplot(data = FitAvg, aes(x = as.numeric(Generation), y = var.offspring.count.Fitness))+
    geom_point()+
    geom_smooth(method = "loess") +
    theme(legend.position = "none") +
    facet_wrap(~file, ncol = 2) 




ggplot(allfiles, aes(x = as.factor(Wave.Number), y = Player.Distance.Fitness, fill = Wave.Number)) + 
  geom_violin() +
  theme(legend.position = "none")+
  facet_wrap(~file, ncol = 2)

traittemp<-allfiles%>%
  select(Generation, offspring_count, file, Player.Distance.Fitness)%>%
  group_by(Generation, file)%>%
  mutate(scaleST0 = scale(Player.Distance.Fitness, center = TRUE))%>%
  mutate(scaleST02 = scaleST0*scaleST0)%>%
  mutate(Generation = as.numeric(Generation))

Gradients <- traittemp %>%
  group_by(Generation, file) %>%
  do({
    model <- lm(offspring_count ~ scaleST0 + scaleST02, data = .)
    data.frame(
      Beta = coefficients(model)[2],
      PB = summary(model)$coef[2, 4]
    )
  })

Gradients <- Gradients %>%
  mutate(sig = if_else(PB < 0.05 , "Y", "N"))



ggplot(Gradients, aes(x=Generation, y = Beta))+
  geom_point(aes(color = sig))+
  geom_smooth(fill="blue")+
  scale_color_manual(values = c("red","grey"))+
  geom_hline(yintercept=0, linetype="dashed", color = "black")+
  theme(legend.position = "none",
        panel.background = element_blank())+
  facet_wrap(~file)





```

## Trait Evolution

This section should summarize the patterns of trait evolution

```{r}

  


  


for(i in seq_along(Traits)){

  plot <- ggplot(data = TraitAvg, aes(x = as.numeric(Generation), y = !!sym(Traits[i])))+
    geom_smooth(data = TraitAvg, aes(x = as.numeric(Generation), y = !!sym(Traits[i])), method = "loess") +
    geom_point(data=allfiles, aes(x = as.numeric(Generation), y = !!sym(Traits[i]), color = offspring_count), size = 0.5, alpha =0.1)+
    theme(legend.position = "none") +
    facet_wrap(~file, ncol = 2) 

  print(plot)
}




```

## Gene Evolution

```{r}



for(i in seq_along(Genes)){

  plot <- ggplot(data = GeneAvg, aes(x = as.numeric(Generation), y = !!sym(paste("mean.",Genes[i], sep = ""))))+
    geom_point(data = allfiles, aes(x = as.numeric(Generation), y = !!sym(Genes[i])), size=0.1, alpha = 0.02)+
    geom_smooth(data = GeneAvg, aes(x = as.numeric(Generation), y = !!sym(paste("mean.",Genes[i], sep = "")), method = "loess")) +
    theme(legend.position = "none") +
    facet_wrap(~file, ncol = 2) 

  print(plot)
}

```

## Heatmap

```{r}
#| eval: false

maxwave = max(allfiles$Wave.Number)

Twin3 <- Twin3 %>%
  select(Wave.Number, Slime.ID, Player.Distance.Fitness, Main.Resistance.Trait, Secondary.Resistance.Trait, Slime.View.Range.Trait, 
         Tower.View.Range.Trait, Player.View.Range.Trait, Wall.View.Range.Trait, Sheep.View.Range.Trait, Slime.Attraction.Trait, 
         Tower.Attraction.Trait, Player.Attraction.Trait, Wall.Attraction.Trait, Sheep.Attraction.Trait, Slime.Optimal.Distance.Trait, 
         Speed.Trait, Turn.Rate.Trait, Sprint.Duration.Trait, Sprint.Cooldown.Trait, offspring_count) %>%
  filter(Wave.Number == maxwave)

paletteLength <- 50
myColor <- colorRampPalette(c("blue", "white", "#ED2024"))(paletteLength)
# length(breaks) == length(paletteLength) + 1
# use floor and ceiling to deal with even/odd length pallettelengths


Heatmap <- Twin3 %>%
  select(Player.Distance.Fitness, Main.Resistance.Trait, Secondary.Resistance.Trait, Slime.View.Range.Trait, 
         Tower.View.Range.Trait, Player.View.Range.Trait, Wall.View.Range.Trait, Sheep.View.Range.Trait, Slime.Attraction.Trait, 
         Tower.Attraction.Trait, Player.Attraction.Trait, Wall.Attraction.Trait, Sheep.Attraction.Trait, Slime.Optimal.Distance.Trait, 
         Speed.Trait, Turn.Rate.Trait, Sprint.Duration.Trait, Sprint.Cooldown.Trait)

Heatmap <- scale(Heatmap)

colnames(Heatmap) <- c('Fitness', 'Main Resistance', 'Secondary Resistance', 'Slime View Range', 'Tower Viewe Range', 'Player View Range',
                        'Wall View Range', 'Sheep View Range', 'Slime Attraction', 'Tower Attraction', 'Player Attraction', 'Wall Attraction',
                        'Sheep Attraction', 'Slime Optimal Distance', 'Speed', 'Turn Rate', 'Sprint Duration', 'Sprint Cooldown')

Heatmatrix2 <- as.matrix(Heatmap)

myBreaks2 <- c(seq(min(Heatmatrix2), 0, length.out=ceiling(paletteLength/2) + 1), seq(max(Heatmatrix2)/paletteLength, max(Heatmatrix2), 
                                                                                      length.out=floor(paletteLength/2)))

heatmap1 = pheatmap(Heatmatrix2,
         cluster_rows = TRUE, # don't cluster rows
         cluster_cols = TRUE, # don't cluster columns
         clustering_distance_cols = "euclidean",
         clustering_distance_rows = "euclidean",
         clustering_method = "complete",
         kmeans_k = 20,
         cellheight = 8,
         fontsize_row = 8,
         color = myColor,
         breaks = myBreaks2,
         border_color = NA)

heatmap2 = pheatmap(Heatmatrix2,
         cluster_rows = TRUE, # don't cluster rows
         cluster_cols = TRUE, # don't cluster columns
         clustering_distance_cols = "euclidean",
         clustering_distance_rows = "euclidean",
         clustering_method = "complete",
         color = myColor,
         breaks = myBreaks2)
```
